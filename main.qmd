---
title: LIS 461 In Class Examples
author: Mariah A. Knowles
format:
  html: {}
jupyter: julia-1.8
---

# Install Packages

```{julia}
using Pkg
Pkg.add("CSV")
Pkg.add("DataFrames")
Pkg.add("Plots")
Pkg.add(url="https://github.com/snotskie/EpistemicNetworkAnalysis.jl")
```

# Load Packages

```{julia}
using CSV
using DataFrames
using Plots
using EpistemicNetworkAnalysis
```

# Load Data

```{julia}
data = DataFrame(CSV.File("data.tsv"))
for col in names(data)
    data[!, col] = replace(data[!, col], missing => 0)
end
```

# Organizing Labels

```{julia}
good_feedback = [
    :GOOD_ASPECTS,
    :GOOD_CHASE,
    :GOOD_FLOW,
    :GOOD_TOP_DETAIL,
    :GOOD_VARIETY,
]

mechanics_feedback = [
    :ADJ,
    :CITATIONS,
    :COMPLEX,
    :HEDGE,
    :JARGON,
    :NOSE,
    :PAREN_RHET_Q,
    :PASSIVE,
    :PRONOUNS,
    :SHOULD,
    :SNARK,
    :TIMING,
    :WALL
]

writing_feedback = [
    :BURIED_CLAIM,
    :EXAMPLES,
    :REDUNDANT,
    :SUMMARIZE,
    :THINKING,
    :UNCLEAR_STRATEGY
]

depth_feedback = [
    :DAMAGE,
    :DISTILL,
    :MORELESS,
    :SPECIFIC_CASE,
    :WASHY
]

argument_feedback = [
    :DOES_NOT_FOLLOW,
    :HISTORY,
    :MORAL_PREMISE,
    :MIXED_THEORY,
    :PREMISE_CLAIM,
    :STRAWMAN
]

constructive_feedback = vcat(mechanics_feedback,
                             writing_feedback,
                             depth_feedback,
                             argument_feedback)

all_feedback = vcat(good_feedback, constructive_feedback)
```

# Visualize Label Counts

```{julia}
function calculate_sums(data, labels)
    return labels |>
        (z) -> [f => sum => f for f in z] |>
        (z) -> combine(data, z...) |>
        (z) -> stack(z, 1:length(labels)) |>
        (z) -> sort(z, :value) |>
        reverse
end

function plot_sorted(data, labels)
    feedback_sums = calculate_sums(data, labels)
    println(feedback_sums)
    plot(feedback_sums[!, :variable],
        feedback_sums[!, :value],
        seriestype=:bar,
        rotation=-90,
        xticks=:all,
        legend=nothing)
end

plot_sorted(data, all_feedback)
```

# Combining Labels

```{julia}
derivedAnyCode!(data, :MECHANICS, mechanics_feedback...)
derivedAnyCode!(data, :WRITING, writing_feedback...)
derivedAnyCode!(data, :DEPTH, depth_feedback...)
derivedAnyCode!(data, :ARGUMENT, argument_feedback...)
combined_feedback = [:MECHANICS, :WRITING, :DEPTH, :ARGUMENT]
```

# Visualize Combined Label Counts

```{julia}
plot_sorted(data, combined_feedback)
```

# Selecting Interesting Labels

```{julia}
interesting_feedback = [:MECHANICS, :WRITING, argument_feedback..., depth_feedback...]
selected_feedback = interesting_feedback |>
    (z) -> calculate_sums(data, z) |>
    (z) -> z[1:6, :variable] |>
    (z) -> Symbol.(z)

println(selected_feedback)
plot_sorted(data, selected_feedback)
```

# Model Options

```{julia}
biplot_only = (i, j, ci, cj) -> i == j
most_variance = SVDRotation()
grader_differences = MulticlassRotation(:Grader)
first_vs_second = MeansRotation(:Assignment, "Workshop 1", "Workshop 2")
connected_assignments = [:RandomID]
separate_assignments = [:RandomID, :Assignment]
```

# Plots

## What kind of feedback are students individually receiving across their workshops?

```{julia}
ena = ENAModel(
    data, selected_feedback, connected_assignments, connected_assignments,
    dropEmpty=true,
    rotateBy=most_variance
)

# apply a little jitter before plotting to keep points from overlapping
ena.accumModel[!, :pos_x] .+= 0.075 .* (rand.() .- .5)
ena.accumModel[!, :pos_y] .+= 0.075 .* (rand.() .- .5)

plot(ena)
```

## How did feedback on the first workshop compare to the second, on average?

```{julia}
ena = ENAModel(
    data, selected_feedback, separate_assignments, separate_assignments,
    dropEmpty=true,
    relationshipFilter=biplot_only,
    rotateBy=first_vs_second
)

# apply a little jitter before plotting to keep points from overlapping
ena.accumModel[!, :pos_x] .+= 0.075 .* (rand.() .- .5)
ena.accumModel[!, :pos_y] .+= 0.075 .* (rand.() .- .5)

plot(ena)
```

## How did feedback given by different graders compare, on average?

```{julia}
ena = ENAModel(
    data, selected_feedback, separate_assignments, separate_assignments,
    dropEmpty=true,
    relationshipFilter=biplot_only,
    rotateBy=grader_differences
)

# apply a little jitter before plotting to keep points from overlapping
ena.accumModel[!, :pos_x] .+= 0.075 .* (rand.() .- .5)
ena.accumModel[!, :pos_y] .+= 0.075 .* (rand.() .- .5)

plot(ena)
```